/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


BEGIN
	DEFINE("__KERNEL__")
	INCLUDE("include")
	INCLUDE("include/$TARGET_ARCH-kos")

	/* Disable generation of code that uses floating point registers.
	 * It would be too expensive for kernel code to make use of floating
	 * point registers in a way that preserves the original user-space
	 * content, so we simply don't use it, and won't run into problems. */

	IF ($TARGET_ARCH == i?86 || $TARGET_ARCH == x86_64)
		C_FLAGS("-mno-sse")
		C_FLAGS("-mno-sse2")
		C_FLAGS("-mno-sse3")
		C_FLAGS("-mno-sse4")
		C_FLAGS("-mno-ssse3")
		C_FLAGS("-mno-mmx")
		C_FLAGS("-mno-3dnow")
		C_FLAGS("-mno-avx")
		C_FLAGS("-mtls-direct-seg-refs")
	FI

	/* Without SEE (disabled above), 4/8-byte (2^<2/3>) stack alignment is all we really need. */
	IF ($TARGET_ARCH == i?86)
		C_FLAGS("-mpreferred-stack-boundary=2")
	ELIF ($TARGET_ARCH == x86_64)
		C_FLAGS("-mpreferred-stack-boundary=3")
		/* Disable the red zone in kernel-space */
		C_FLAGS("-mno-red-zone")
	FI

	BEGIN PROJECT("kernel")
		DEFINE("CONFIG_BUILDING_KERNEL_CORE")

		//SET_COMPILER("$CXX")
		/* This flag disabled alignment that
		 * would unnecessarily bloat the kernel. */
		L_FLAGS("-Wl,--nmagic")
		L_FLAGS("-Wl,--eh-frame-hdr")

		/* This following flag allows us to overlay sections,
		 * which is required for PERXXX templates and offsets. */
		L_FLAGS("-Wl,--no-check-sections")

		L_FLAGS("-nostdlib")

		/* Configure GCC for a memory model to address -2Gb...2Gb */
		IF ($TARGET_ARCH == x86_64)
			//C_FLAGS("-mcmodel=large")
			C_FLAGS("-mcmodel=kernel")
		FI


		SET_OUTPUT("/$KERNEL_BINARY")

		IF ($TARGET_ARCH == x86_64)
			LINKER_SCRIPT("./i386-kos/kernel.ld")
		ELSE
			LINKER_SCRIPT("./$TARGET_ARCH-kos/kernel.ld")
		FI

		LIB("gcc")
		C_FLAGS("-static-libgcc")
		L_FLAGS("-static-libgcc")
		C_FLAGS("-ffreestanding")
		L_FLAGS("-ffreestanding")

		IF ($TARGET_CPU == i?86)
			SOURCE("../hybrid/i386-kos/*.c")
			SOURCE("../hybrid/i386-kos/*32.S")
			SOURCE("i386-kos/*.c")
			SOURCE("i386-kos/*32.S")
			SOURCE("i386-kos/kernel.ld.S")
			SOURCE("src/core/i386-kos/*.c")
			SOURCE("src/core/i386-kos/*32.S")
		ELIF ($TARGET_CPU == x86_64)
			SOURCE("../hybrid/i386-kos/*.c")
			SOURCE("../hybrid/i386-kos/*64.S")
			SOURCE("i386-kos/*.c")
			SOURCE("i386-kos/*64.S")
			SOURCE("i386-kos/kernel.ld.S")
			SOURCE("src/core/i386-kos/*.c")
			SOURCE("src/core/i386-kos/*64.S")
		FI

		SOURCE("../hybrid/*.c")
		SOURCE("src/kernel/*.c")
		SOURCE("src/unwind/*.c")
		SOURCE("src/sched/*.c")
		SOURCE("src/core/*.c")
		SOURCE("src/net/*.c")
		SOURCE("src/vm/*.c")
		SOURCE("src/vm/*.S")
		SOURCE("src/dev/*.c")
		SOURCE("src/fs/*.c")
		SOURCE("src/fs/*.S")

#ifndef CONFIG_PRINTCMD
		POSTLINK_BEGIN
			/* Rebuild the kernel symbol table. */
			function Elf_SymbolHash(name) {
				/* Kernel symbol name hashing function (Standard ELF hashing). */
				local h = (uint32_t)0,g;
				for (local c: name) {
					h = (h << 4) + c.ord();
					g = h & 0xf0000000;
					if (g) h ^= g >> 24;
					h &= ~g;
				}
				return h;
			}
			local p = process(expand_options("$READELF"),[
				"-s","-W",expand_options("$KERNEL_BINARY")
			]);
			local r,w = pipe.new()...;
			p.stdout = w;
			p.start();
			w.close();
			local symbols = dict();
			for (local l: r) {
				local bind,vis,name,size;
				try {
					none,none,size,none,bind,vis,none,name =
						l.scanf(" %[0-9]: %[0-9a-fA-F] %[0-9] %[^ ] %[^ ] %[^ ] %[^ ] %[^]")...;
				} catch (e...) {
					continue;
				}
				if (vis != "DEFAULT") continue;
				if (bind != "GLOBAL" && bind != "WEAK") continue;
				if (name.startswith("kernel_") &&
				   (name.endswith("_start") ||
				    name.endswith("_end") ||
				    name.endswith("_size")))
					print "WARNING: Potentially unwanted export:",repr name;
				symbols[name.strip()] = (int)size.strip();
			}
			r.close();
			p.join();
			/* Generate the hash-vector */
			local hash_mask = 1;
			while (hash_mask <= #symbols) {
				hash_mask = (hash_mask << 1) | 1;
			}
			if ((hash_mask - #symbols) < 64)
				hash_mask = (hash_mask << 1) | 1;
			local hash_vector = [none] * (hash_mask + 1);
			for (local name: symbols.keys().sorted()) {
				local hash = Elf_SymbolHash(name);
				local perturb,j;
				perturb = j = hash & hash_mask;
				for (;;) {
					local index = j & hash_mask;
					if (hash_vector[index] is none) {
						hash_vector[index] = pack(name,symbols[name],hash);
						break;
					}
					j = ((j << 2) + j + perturb + 1);
					perturb = perturb >> 5;
				}
			}
			local fp = file.writer();
			print fp: ".section .rodata.kernel_symtab";
			print fp: "INTERN_ENTRY(kernel_symbol_table)";
			print fp: "	PTR 0x%x" % hash_mask;
			print fp: "	/* Symbol table */";
			for (local i,data: util.enumerate(hash_vector)) {
				if (data is none) {
					print fp: "	PTR 0";
					print fp: "	PTR 0";
					print fp: "	PTR 0";
					print fp: "	PTR 0";
				} else {
					print fp: "	PTR .Lname"+i;
					print fp: "	PTR",data[0];
					print fp: "	PTR 0x%x" % data[1];
					print fp: "	PTR 0x%x" % data[2];
				}
			}
			print fp: "SYMEND(kernel_symbol_table)";
			print fp: ".section .rodata.kernel_strtab";
			local strings = list(util.enumerate(hash_vector));
			strings.sort([](a,b) -> a[1][0] < b[1][0]);
			for (local i,data: strings) {
				if (data is none) continue;
				print fp: ".Lname"+i+":";
				print fp: "	.string",repr data[0];
			}
			local data = fp.pack();
			local old_data;
			local symfile = expand_options("src/kernel/src/fs/${TARGET_ARCH}-kos-kernel-symbols.h");
			try {
				old_data = file.open(symfile,"r").read();
			} catch (...) {
				old_data = "";
			}
			if (data != old_data) {
				local outfd = file.open(symfile,"w");
				outfd.write(data);
				outfd.close();
				//set_file_changed(symfile);
				return true;
			}
		POSTLINK_END
#endif /* !CONFIG_PRINTCMD */
	END

#include "modules/.sources"

END











