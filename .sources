/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#define DEFINE(x)     P_FLAGS("-D"+x)
#define INCLUDE(x)    P_FLAGS("-I"+FILES(x)[0])
#define LIBPATH(x)    L_FLAGS("-L"+FILES(x)[0])
#define LIB(x)        L_FLAGS("-l"+(x))
#define SET_OUTPUT_DLL(x) \
	CREATE_FOLDER(fs.path.head(x)) \
	SET_OUTPUT((x)+".so")
#define SET_OUTPUT_EXE(x) \
	CREATE_FOLDER(fs.path.head(x)) \
	SET_OUTPUT(x)
#define LINKER_SCRIPT(name) \
	BEGIN \
		P_FLAGS("-P") \
		DEFINE("__LINKER__") \
		PREPROCESS(name) \
	END \
	L_FLAGS("-Wl,-T"+PREPROCESS_NAME(name))

#include "scripts/diskutil.dee"

IF(NOT CONFIG_NDEBUG)
	DEFOPT(CONFIG_DEBUG)
FI

DEFINE("__ELF__")
IF(CONFIG_OPTIMIZE)
	C_FLAGS("-O3")
	L_FLAGS("-O3")
FI
IF(CONFIG_DEBUG)
	C_FLAGS("-fstack-protector-strong","-g")
	L_FLAGS("-fstack-protector-strong","-g")
ELSE
	C_FLAGS("-DNDEBUG")
FI
INCLUDE("/include")
INCLUDE("/include/${TARGET_ARCH}-kos")

C_FLAGS("-Wall")
C_FLAGS("-Wextra")
C_FLAGS("-Wno-address")
C_FLAGS("-Wno-unused-value")
C_FLAGS("-Wno-nonnull-compare")
C_FLAGS("-Wno-unused-parameter")
C_FLAGS("-Wno-comment")
C_FLAGS("-Wno-format")
C_FLAGS("-Wno-strict-aliasing")
C_FLAGS("-Wno-missing-field-initializers")
C_FLAGS("-Wno-type-limits")

/* Among other things, this optimization can create arbitrary
 * jumps anywhere in code that could break the try ranges:
 * >> TRY {
 * >>     TRY {
 * >>         printf("foo\n");
 * >>         error_throw(42);
 * >>     } EXCEPT(1) {
 * >>         printf("EXCEPT #1, %d\n",error_code());
 * >>         error_rethrow();
 * >>     }
 * >> } EXCEPT(1) {
 * >>     printf("EXCEPT #2, %d\n",error_code());
 * >>     // `-fgcse' may replace this `error_rethrow()' with a
 * >>     // jump to the same statement above, as it things that
 * >>     // `error_rethrow()' is a simple, nothrow function,
 * >>     // meaning that a big 5-byte call instruction to it
 * >>     // could be replaced by a small 2-byte jmp to the
 * >>     // previous call.
 * >>     // However, that breaks the return address that `error_rethrow()'
 * >>     // uses to determine where exception handling should continue,
 * >>     // meaning we'd end up with an infinite loop that keeps on
 * >>     // executing this second exception handler, as it thinks that
 * >>     // the error keeps on originating from the except above.
 * >>     error_rethrow();
 * >> }
 */
//C_FLAGS("-fno-gcse")

C_FLAGS("-fno-crossjumping") /* Definitely */

/* Disable reordering of blocks to prevent exception handlers
 * from breaking due parts of code guarded by them having been
 * moved elsewhere. */
C_FLAGS("-fno-reorder-blocks") /* Definitely */
C_FLAGS("-fno-reorder-blocks-and-partition") /* Definitely */

//C_FLAGS("-fno-thread-jumps") /* NOPE#1 */

//C_FLAGS("-fno-cse-follow-jumps") /* NOPE#2 */
//C_FLAGS("-fno-function-cse") /* NOPE#2 */
//C_FLAGS("-fno-rerun-cse-after-loop") /* NOPE#2 */
//C_FLAGS("-fno-cse-skip-blocks") /* NOPE#2 */

#include "src/.sources"
#include "disk/.sources"
